name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch: # Allows manual trigger

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --production

      - name: Run tests (optional)
        working-directory: ./backend
        run: npm test || true

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          
          # Add EC2 host to known_hosts
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # Create deployment package
          cd backend
          tar -czf ../backend-deploy.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='*.log' \
            .
          cd ..
          
          # Copy files to EC2
          scp -i ~/.ssh/ec2_key.pem backend-deploy.tar.gz $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          
          # Execute deployment commands on EC2
          ssh -i ~/.ssh/ec2_key.pem $EC2_USERNAME@$EC2_HOST <<'EOF'
            echo "===== Starting deployment ====="
            
            # Extract new files
            tar -xzf backend-deploy.tar.gz -C tutiful-backend
            rm backend-deploy.tar.gz
            
            # Navigate to app directory
            cd tutiful-backend
          EOF
          
          # Copy .env file to EC2 (after extraction so it doesn't get overwritten)
          echo "$PROD_ENV_FILE" > /tmp/.env
          scp -i ~/.ssh/ec2_key.pem /tmp/.env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/tutiful-backend/.env
          rm /tmp/.env
          
          # Continue deployment
          ssh -i ~/.ssh/ec2_key.pem $EC2_USERNAME@$EC2_HOST <<'EOF'
            cd tutiful-backend
            
            # Install/update dependencies
            npm ci --production
            
            # Restart application with PM2
            if pm2 list | grep -q "tuition-backend"; then
              echo "Reloading existing application..."
              pm2 reload tuition-backend --update-env
            else
              echo "Starting new application..."
              pm2 start ecosystem.config.js
              pm2 save
            fi
            
            # Show status
            echo ""
            echo "===== Application Status ====="
            pm2 status
            pm2 logs tuition-backend --lines 10 --nostream
            
            echo ""
            echo "===== Deployment completed successfully! ====="
          EOF
          
          echo "Deployment completed"

      - name: Health Check
        run: |
          sleep 10
          curl -f http://${{ secrets.EC2_HOST }}/health || exit 1
          echo "Health check passed"
